@model IEnumerable<IssueTracker_CoreServices.Models.Issue>
@using Microsoft.AspNetCore.Identity
@using IssueTracker_CoreServices.Models;
@inject SignInManager<IssueTrackerUser> SignInManager
@inject UserManager<IssueTrackerUser> UserManager

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Project
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                Created
            </th>
            <th>
                Closed
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            switch (item.Severity)
            {
                case Severity.Major:
                    <text>
                    <tr class="table-warning">
                    </text>
                    break;
                case Severity.Minor:
                    <text>
                    <tr class="table-active">
                    </text>
                    break;
                case Severity.Critical:
                    <text>
                    <tr class="table-danger">
                    </text>
                    break;
                default:
                    <text>
                    <tr>
                    </text>
                    break;
            }
                <td style="">
                @Html.DisplayFor(modelItem => item.Project.Name)
                </td>
                <td>
                @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                @if (item.ClosedDate.HasValue)
                {
                    @Html.DisplayFor(modelItem => item.ClosedDate)
                }
                else
                {
                        <p>-</p>
                }
                </td>
            @if (SignInManager.IsSignedIn(User))
            {
                IssueTrackerUser trackerUser = (IssueTrackerUser)await UserManager.GetUserAsync(User);
                    <td class="">
                        <input type="button" value="Details" class="btn btn-secondary btn-sm" onclick="location.href='@Url.Action("Details", "Issue",new { id = item.Id })'" />
                    </td>
            }
            else
            {
                    <td class="btn-group">
                        <input type="button" value="Details" class="btn btn-secondary btn-sm" onclick="location.href='@Url.Action("Details", "Issue",new { id = item.Id })'" />
                    </td>
            }
                <tr/>
        }
    </tbody>
</table>
